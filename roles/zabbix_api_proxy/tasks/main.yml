# ======================================================================
# GT Monitoramento 2025
# roles/zabbix_api_proxy/tasks/main.yml
# Descrição: Registra o Proxy no Zabbix Server.
# Referências:
# 1) API Zabbix: https://www.zabbix.com/documentation/2.0/en/manual/appendix/api/api
# 2) Ansible Zabbix Proxy Group Module: https://docs.ansible.com/ansible/latest/collections/community/zabbix/zabbix_proxy_group_module.html
# 3) https://github.com/ansible-collections/community.zabbix/blob/main/docs/ZABBIX_PROXY_ROLE.md
# ======================================================================
---
# 0) Base da API: usa a URL completa se houver; senão monta pelos componentes

- name: Definir preferencia de URL (A = completa)
  ansible.builtin.set_fact:
    _zbx_url_pref: "{{ (zabbix_server_url | default('')) | string | trim }}"

- name: Ler a URL 
  ansible.builtin.set_fact:
    _zbx_base_url: "{{ _zbx_url_pref | regex_replace('/+$','') }}"
  when: _zbx_url_pref | length > 0

- name: Definir endpoint da API
  ansible.builtin.set_fact:
    zbx_api_url: "{{ _zbx_base_url ~ '/api_jsonrpc.php' }}"

# 0.1) Ler PSK local do proxy para alinhar no Server apenas quando TLS=PSK e flag ligada
- name: Ler PSK do proxy (condicional)
  ansible.builtin.slurp:
    src: "{{ zabbix_proxy_psk_file }}"
  register: proxy_psk_read
  no_log: true
  when:
    - zabbix_register_proxy_psk_to_server | default(true) | bool
    - (zabbix_proxy_tls_accept | int) == 2

- name: Definir PSK em memoria (64 hex)
  ansible.builtin.set_fact:
    zbx_proxy_psk_value: "{{ (proxy_psk_read.content | b64decode) | trim }}"
  no_log: true
  when: proxy_psk_read is defined and proxy_psk_read.content is defined

# 1) Verificar se o proxy ja existe
- name: API | proxy.get (por nome)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.get"
      params:
        filter:
          name: ["{{ zabbix_proxy_hostname }}"]
        output:
          - proxyid
          - name
          - operating_mode
          - tls_connect
          - tls_accept
          - state
          - lastaccess
      id: 1
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  register: zbx_proxy_get
  failed_when: zbx_proxy_get.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Fatos | existe/id/estado atual
  ansible.builtin.set_fact:
    zbx_proxy_exists: "{{ (zbx_proxy_get.json.result | default([])) | length > 0 }}"
    zbx_proxy_id: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='proxyid') | first | default('') }}"
    zbx_mode_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='operating_mode') | first | default(omit) }}"
    zbx_tls_conn_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='tls_connect') | first | default(omit) }}"
    zbx_tls_acc_cur: "{{ (zbx_proxy_get.json.result | default([])) | map(attribute='tls_accept') | first | default(omit) }}"

# 2) Criar (minimo)
- name: API | proxy.create
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.create"
      params:
        name: "{{ zabbix_proxy_hostname }}"
        description: "Proxy {{ zabbix_proxy_hostname }} provisionado via Ansible"
        operating_mode: "{{ zabbix_proxy_mode | int }}"
      id: 2
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  when: not zbx_proxy_exists
  register: zbx_proxy_create
  failed_when: zbx_proxy_create.json.error is defined
  delegate_to: localhost
  run_once: true

# 3) Atualizar ID se criou agora
- name: Atualizar ID (se criou agora)
  ansible.builtin.set_fact:
    zbx_proxy_id: "{{ zbx_proxy_create.json.result.proxyids[0] }}"
  when: not zbx_proxy_exists

# 4) Precisa atualizar modo/TLS?
- name: Precisa atualizar modo/TLS?
  ansible.builtin.set_fact:
    zbx_needs_update: >-
      {{
        (zbx_proxy_id | length > 0) and (
          (zbx_proxy_exists and (
            (zbx_mode_cur | int)     != (zabbix_proxy_mode | int) or
            (zbx_tls_conn_cur | int) != (zabbix_proxy_tls_connect | int) or
            (zbx_tls_acc_cur  | int) != (zabbix_proxy_tls_accept  | int)
          ))
          or (not zbx_proxy_exists)
        )
      }}

# 5) Atualizar (modo/TLS) e, se aplicavel, PSK/identity
- name: API | proxy.update (modo/TLS/PSK)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "proxy.update"
      # O corpo (body) da requisição é montado com uma lógica condicional.
      # As credenciais PSK são adicionadas com o filtro 'combine' apenas se
      # o modo de aceitação (tls_accept) for 2 (PSK), que é o correto
      # para um proxy ativo se comunicando com o servidor.
      params: >-
        {{
          {
            "proxyid": zbx_proxy_id,
            "operating_mode": (zabbix_proxy_mode | int),
            "tls_connect": (zabbix_proxy_tls_connect | int),
            "tls_accept":  (zabbix_proxy_tls_accept  | int)
          }
          |
          combine(
            (
              zabbix_register_proxy_psk_to_server | default(true) | bool and
              (zabbix_proxy_tls_accept | int) == 2 and
              (zabbix_proxy_psk_identity | default('')) | length > 0 and
              (zbx_proxy_psk_value | default('')) | length > 0
            )
            | ternary(
                {"tls_psk_identity": zabbix_proxy_psk_identity, "tls_psk": zbx_proxy_psk_value},
                {}
            )
          )
        }}
      id: 3
    follow_redirects: all
    validate_certs: "{{ zabbix_validate_certs | default(false) }}"
  when: zbx_needs_update | bool
  register: zbx_proxy_update
  failed_when: zbx_proxy_update.json.error is defined
  delegate_to: localhost
  run_once: true

# 6) Mensagem final
- name: Final | Resultado
  ansible.builtin.debug:
    # A mensagem de status deve refletir a configuração de aceitação do servidor.
    msg: >-
      Proxy '{{ zabbix_proxy_hostname }}' {{
        (not zbx_proxy_exists) | ternary('criado',
        (zbx_needs_update | ternary('atualizado','verificado')))
      }} via API. TLS={{ (zabbix_proxy_tls_accept | int) == 2 | ternary('PSK','Nenhum/Outro') }}.