# ======================================================================
# GT Monitoramento 2025
# Arquivo: roles/zabbix_api_agent/tasks/main.yml
# Descrição: Registra/atualiza host do Zabbix Agent 2 no Zabbix Server.
# Referências:
# 1) API Zabbix: https://www.zabbix.com/documentation/2.0/en/manual/appendix/api/api
# 2) Ansible Zabbix Proxy Group Module: https://docs.ansible.com/ansible/latest/collections/community/zabbix/zabbix_proxy_group_module.html
# 3) BrandyMint Ansible Zabbix Agent 2: https://github.com/BrandyMint/ansible-zabbix-agent2
# 4) Piccadil Zabbix Agent: https://github.com/piccadil/zabbix-agent
# 5) https://www.reddit.com/r/zabbix/comments/1ffwqvo/adding_new_host_to_zabbixserver_via_ansible/
# ======================================================================
---
# 0) Verificação e preparação de variáveis
- name: Verificar variáveis obrigatórias do agente
  ansible.builtin.assert:
    that:
      - zabbix_server_url is defined and zabbix_server_url | length > 0
      - zabbix_api_token is defined and zabbix_api_token | length > 0
      - zabbix_agent_hostname is defined and zabbix_agent_hostname | length > 0
      - zabbix_agent_hostgroups is defined
      - zabbix_agent_templates is defined
      - zabbix_agent_psk_identity is defined
      - zabbix_agent_psk_file is defined
    fail_msg: "Variáveis obrigatórias ausentes para registrar o agente"

- name: Definir IP de origem do agente (fallback)
  ansible.builtin.set_fact:
    zabbix_agent_source_ip: "{{ ansible_default_ipv4.address }}"
  when: zabbix_agent_source_ip is not defined or (zabbix_agent_source_ip | length) == 0

- name: Montar URL da API
  ansible.builtin.set_fact:
    zbx_api_url: "{{ zabbix_server_url | regex_replace('/+$','') ~ '/api_jsonrpc.php' }}"

- name: Ler PSK do agente
  ansible.builtin.slurp:
    src: "{{ zabbix_agent_psk_file }}"
  register: agent_psk
  no_log: true

- name: Definir fato com PSK (64 hex)
  ansible.builtin.set_fact:
    agent_psk_key: "{{ (agent_psk.content | b64decode) | trim }}"
  no_log: true

# 1) Obter IDs de pré-requisitos (Grupos e Templates) do Zabbix Server
- name: API | hostgroup.get (obter IDs dos grupos)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "hostgroup.get"
      params:
        output: ["groupid"]
        filter:
          name: "{{ zabbix_agent_hostgroups }}"
      id: 1
  register: zbx_get_groups
  failed_when: zbx_get_groups.json.error is defined
  delegate_to: localhost
  run_once: true

- name: API | template.get (obter IDs dos templates)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "template.get"
      params:
        output: ["templateid"]
        filter:
          name: "{{ zabbix_agent_templates }}"
      id: 2
  register: zbx_get_templates
  failed_when: zbx_get_templates.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Fatos | Preparar listas de IDs para a API
  ansible.builtin.set_fact:
    zbx_group_id_list: "{{ zbx_get_groups.json.result | map(attribute='groupid') | list }}"
    zbx_template_id_list: "{{ zbx_get_templates.json.result | map(attribute='templateid') | list }}"

# 2) Verificar se o host já existe
- name: API | host.get (por nome)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.get"
      params:
        filter:
          name: ["{{ zabbix_agent_hostname }}"]
        output: ["hostid"]
      id: 3
  register: zbx_get_host
  failed_when: zbx_get_host.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Fatos | Existe/ID do host
  ansible.builtin.set_fact:
    zbx_host_exists: "{{ (zbx_get_host.json.result | default([])) | length > 0 }}"
    zbx_host_id: "{{ (zbx_get_host.json.result | map(attribute='hostid') | first | default('')) }}"

# 3) Criar o host se não existir
- name: API | host.create (mínimo)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body: >
      {{
        {
          "jsonrpc": "2.0",
          "method": "host.create",
          "params": {
            "host": zabbix_agent_hostname,
            "name": zabbix_agent_hostname,
            "interfaces": [
              {
                "type": 1,
                "main": 1,
                "useip": 1,
                "ip": zabbix_agent_source_ip,
                "dns": "",
                "port": "10050"
              }
            ],
            "groups": zbx_group_id_list | map('community.general.dict_kv', 'groupid') | list
          },
          "id": 4
        } | to_json
      }}
  when: not zbx_host_exists
  register: zbx_create_host
  failed_when: zbx_create_host.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Fatos | Atualizar ID do host se foi criado agora
  ansible.builtin.set_fact:
    zbx_host_id: "{{ zbx_create_host.json.result.hostids[0] }}"
  when: not zbx_host_exists

# 4) Atualizar o host com templates e encriptação
- name: API | host.update (templates e encriptação)
  ansible.builtin.uri:
    url: "{{ zbx_api_url }}"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
      Authorization: "Bearer {{ zabbix_api_token }}"
    body_format: json
    body: >
      {{
        {
          "jsonrpc": "2.0",
          "method": "host.update",
          "params": {
            "hostid": zbx_host_id,
            "status": 0,
            "templates": zbx_template_id_list | map('community.general.dict_kv', 'templateid') | list,
            "tls_connect": 2,
            "tls_accept": 2,
            "tls_psk_identity": zabbix_agent_psk_identity,
            "tls_psk": agent_psk_key
          },
          "id": 5
        } | to_json
      }}
  register: zbx_update_host
  failed_when: zbx_update_host.json.error is defined
  delegate_to: localhost
  run_once: true

- name: Final | Resultado
  ansible.builtin.debug:
    msg: "Host '{{ zabbix_agent_hostname }}' {{ (not zbx_host_exists) | ternary('criado', 'atualizado') }} via API direta."